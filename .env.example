# .env.example - Example configuration for your secure repository
# Copy this file to .env and fill in your actual values.

# --- Cloud Backup Configuration (Optional) ---
# Space-separated list of your rclone remotes for backups.
# Example: CLOUD_REMOTES="gdrive:my-secure-backups dropbox:my-vault/notes"
# If empty or not set, cloud backup steps will be skipped.
CLOUD_REMOTES=""


# --- Age Encryption Configuration ---

# Path to your age private key file (or an encrypted container like a GPG file).
# This is the master key file used for decryption.
# Example 1 (plain key, ensure it's stored very securely):
# MASTER_AGE_KEY_STORAGE_PATH="$HOME/.secrets/my_repo_age_key.txt"
# Example 2 (GPG encrypted key):
# MASTER_AGE_KEY_STORAGE_PATH="$HOME/.secrets/my_repo_age_key.txt.gpg"
# Example 3 (key on a mounted secure USB drive):
# MASTER_AGE_KEY_STORAGE_PATH="/media/my_secure_usb/age_key.txt.gpg"
# The init script will suggest encrypting age-key.txt with GPG.
# If you do, this path should point to the .gpg file.
# The scripts needing the private key will attempt to decrypt it if it ends with .gpg.
MASTER_AGE_KEY_STORAGE_PATH="secrets/age-key.txt.gpg" # Default location for the encrypted key


# The age public key (recipient) used for encrypting files.
# This public key corresponds to the private key at MASTER_AGE_KEY_STORAGE_PATH.
# Generate this from your actual private key file (e.g., age-key.txt) using:
#   age-keygen -y age-key.txt
# Or, if your private key is GPG-encrypted (e.g., age-key.txt.gpg):
#   gpg -d age-key.txt.gpg | age-keygen -y -
# Example: AGE_RECIPIENT="age1qlzxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx"
AGE_RECIPIENT=""


# --- Optional: Editor for opening decrypted files ---
# If set, decrypt-n-work.sh will offer to open files with this editor.
# Example: EDITOR="nvim" or EDITOR="code -w"
# EDITOR=""
